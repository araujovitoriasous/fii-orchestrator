"""
M√≥dulo refatorado de coleta de relat√≥rios CVM.
Usa a nova arquitetura Clean Architecture.
"""

from typing import List, Optional
from loguru import logger

from fii_orchestrator.infrastructure.config import get_config
from fii_orchestrator.etl.orchestrators import ETLOrchestrator

def run():
    """Fun√ß√£o principal para execu√ß√£o do m√≥dulo refatorado."""
    logger.info("üèõÔ∏è Iniciando ETL de relat√≥rios CVM (vers√£o refatorada)")
    
    try:
        # Usar orquestrador da nova arquitetura
        orchestrator = ETLOrchestrator()
        
        # Executar coleta de relat√≥rios CVM
        result = orchestrator.run_cvm_reports_collection()
        
        if result and result.get("status") != "no_tickers":
            logger.info("‚úÖ ETL de relat√≥rios CVM conclu√≠do com sucesso")
            logger.info(f"üìä Resumo: {result['successful_collections']} sucessos, {result['failed_collections']} falhas")
        else:
            logger.warning("‚ö†Ô∏è Nenhum ticker encontrado para coleta CVM")
            
    except Exception as e:
        logger.exception(f"‚ùå Erro fatal no ETL de relat√≥rios CVM: {e}")
        raise

def run_for_specific_tickers(tickers: List[str]):
    """Executa coleta para tickers espec√≠ficos."""
    logger.info(f"üìã Coletando relat√≥rios CVM para tickers espec√≠ficos: {tickers}")
    
    try:
        orchestrator = ETLOrchestrator()
        result = orchestrator.run_cvm_reports_collection(tickers=tickers)
        
        if result:
            logger.info("‚úÖ Coleta para tickers espec√≠ficos conclu√≠da")
            logger.info(f"üìä Resumo: {result['successful_collections']} sucessos, {result['failed_collections']} falhas")
        else:
            logger.warning("‚ö†Ô∏è Nenhum resultado obtido")
            
    except Exception as e:
        logger.exception(f"‚ùå Erro na coleta para tickers espec√≠ficos: {e}")
        raise

if __name__ == "__main__":
    run()
