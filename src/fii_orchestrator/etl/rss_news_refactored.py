"""
M√≥dulo refatorado de coleta de not√≠cias RSS.
Usa a nova arquitetura Clean Architecture.
"""

from typing import List, Optional
from loguru import logger

from fii_orchestrator.infrastructure.config import get_config
from fii_orchestrator.etl.orchestrators import ETLOrchestrator

def run():
    """Fun√ß√£o principal para execu√ß√£o do m√≥dulo refatorado."""
    logger.info("üì∞ Iniciando ETL de not√≠cias RSS (vers√£o refatorada)")
    
    try:
        # Usar orquestrador da nova arquitetura
        orchestrator = ETLOrchestrator()
        
        # Executar coleta de not√≠cias
        result = orchestrator.run_news_collection()
        
        if result:
            logger.info("‚úÖ ETL de not√≠cias RSS conclu√≠do com sucesso")
            logger.info(f"üìä Resumo: {result['news_collected']} not√≠cias coletadas")
        else:
            logger.warning("‚ö†Ô∏è Nenhuma not√≠cia coletada")
            
    except Exception as e:
        logger.exception(f"‚ùå Erro fatal no ETL de not√≠cias RSS: {e}")
        raise

def run_with_custom_sources(sources: List[str]):
    """Executa coleta com fontes RSS personalizadas."""
    logger.info(f"üì° Coletando de fontes personalizadas: {sources}")
    
    try:
        orchestrator = ETLOrchestrator()
        result = orchestrator.run_news_collection(sources=sources)
        
        if result:
            logger.info("‚úÖ Coleta com fontes personalizadas conclu√≠da")
            logger.info(f"üìä Resumo: {result['news_collected']} not√≠cias coletadas")
        else:
            logger.warning("‚ö†Ô∏è Nenhuma not√≠cia coletada")
            
    except Exception as e:
        logger.exception(f"‚ùå Erro na coleta com fontes personalizadas: {e}")
        raise

if __name__ == "__main__":
    run()
